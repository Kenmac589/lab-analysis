var x[80][5000], angle, angleA, angleB, angles;
var b%, c%, I%, EMGs%, d1, d2, d3, d4;
var rtime[5000], rtimes[5000] , II, II%, EMGsink%, Kinsink%, EMGsinkloc[100], Kinsinkloc[100], timediff[100];
var a%[40], tr%, lev, a$, b$, c$, knx, kny;
var emgfile$, path$, ntrial%, frpersec%, size, summe, summe2, mspu, quest, quest%;
var tr$[100], nofch%, nofch2%, nvar%;
var ch1%, ch2%, ch3%,ch4%, ch5%, ch6%, ch7%, ch8%, ch9%, ch10%, ch11%, ch12%, ch13%, ch14%, ch15%;
var synchchan%, syncht[100], synchdif, synch[100];
var d, dx, dy, a, XH, YH, h, hh, dxx, dyy, Cal1, Cal2, Cal3, Cal4, Cal5, Cal6, Cal7;
var femur, tibia, crest, Tars, Toe, femur2, tibia2;

Dlgcreate("Enter the necessary information");
DlgChan(1, "channel with the synches from the EMG rec", 2);
dlginteger(2, "What is the number of frames per second?", 1, 1000);
dlgreal(3, "Length of thigh (cm)", 1, 3);
dlgreal(4, "Length of shank (cm)", 1, 3);
dlgshow(synchchan%, frpersec%, femur, tibia);
mspu:=(1/frpersec%)*1000000;


'************Gets information about path and number of Trials***********************************
ntrial%:=count(synchchan%,cursor(1), cursor(2));
'***********************************************************************************************

syncht[0]:=cursor(1);

'************Gets times of each synch***********************************
For I%:=1 to ntrial% do
syncht[I%]:=nexttime(synchchan%, syncht[I%-1]);
next;
'***********************************************************************************************

'*************************creates the nessecarry buffer channels**************************************
for I%:=1 to 30 do
a%[I%]:=memchan(9, 0, 0.004);
next;
'***************************************************************************************************

FilePathSet(path$); 

for tr%:=1 to ntrial% do										'repat this proces for each trial

    Fileopen("*.csv",8);                                        'opens the .CSV file for the trials
    
'********************************Figures out teh size of teh .cvs file************************************    
for I%:=1 to 3920 do												
    read(x[][I%]);
        summe:=x[3][I%]+x[4][I%]+x[5][I%]+x[6][I%];
        summe2:=x[3][I%-1]+x[4][I%-1]+x[5][I%-1]+x[6][I%-1];
        if summe<>0 then
            if summe2<>0 then
                nvar%:=I%;
            endif;
        endif;
next;
'************************************************************************************************************    
    
'*******************************Reads the information from teh .cvs file***************************************
for I%:=1 to nvar% do													
    read(x[][I%]);
	II:=I%;
    rtime[I%]:=II/frpersec%;   
    synch[tr%]:=rtime[I%];        
next;    
'**************************************************************************************************************       
    
fileclose();                                        'closes the .CSV file for the trials

    
'**********************Calibration Factor***********************************************************************************
for I%:=4 to nvar%-1 do													
    Cal1:=abs(x[4][I%]-x[1][I%])/2;    
    Cal2:=abs(x[7][I%]-x[4][I%])/2;
    Cal3:=abs(x[13][I%]-x[10][I%])/2;
    Cal4:=abs(x[16][I%]-x[13][I%])/2;
    Cal5:=abs(x[2][I%]-x[11][I%])/2.5;
    Cal6:=abs(x[5][I%]-x[14][I%])/2.5;
    Cal7:=abs(x[8][I%]-x[17][I%])/2.5;
    x[60][I%]:=(Cal1+Cal2+Cal3+Cal4+Cal5+Cal6+Cal7)/7;
       
next; 
'**************************************************************************************************************************    
    
'*************************************Transforms the data******************************************************************    
    for I%:=4 to nvar%-1 do			
    x[19][I%]:=(x[19][I%])/x[60][I%];    
    x[20][I%]:=(1000-x[20][I%])/x[60][I%];
    x[22][I%]:=(x[22][I%])/x[60][I%];
    x[23][I%]:=(1000-x[23][I%])/x[60][I%];
    x[25][I%]:=(x[25][I%])/x[60][I%];    
    x[26][I%]:=(1000-x[26][I%])/x[60][I%];    
    x[28][I%]:=(x[28][I%])/x[60][I%];    
    x[29][I%]:=(1000-x[29][I%])/x[60][I%];
    x[31][I%]:=(x[31][I%])/x[60][I%];    
    x[32][I%]:=(1000-x[32][I%])/x[60][I%];
    x[34][I%]:=(x[34][I%])/x[60][I%];
    x[35][I%]:=(1000-x[35][I%])/x[60][I%];
    x[37][I%]:=(x[37][I%])/x[60][I%];
    x[38][I%]:=(1000-x[38][I%])/x[60][I%];
    x[40][I%]:=(x[40][I%])/x[60][I%];    
    x[41][I%]:=(1000-x[41][I%])/x[60][I%];
    x[43][I%]:=(x[43][I%])/x[60][I%];        
    x[44][I%]:=(1000-x[44][I%])/x[60][I%];
    x[46][I%]:=(x[46][I%])/x[60][I%];        
    x[47][I%]:=(1000-x[47][I%])/x[60][I%];
    x[49][I%]:=(x[49][I%])/x[60][I%];        
    x[50][I%]:=(1000-x[50][I%])/x[60][I%];
    x[52][I%]:=(x[52][I%])/x[60][I%];        
    x[53][I%]:=(1000-x[53][I%])/x[60][I%];
    x[55][I%]:=(x[55][I%])/x[60][I%];        
    x[56][I%]:=(1000-x[56][I%])/x[60][I%];
        
next;      
'***************************************************************************************************************************    
      
'**********************Calculate the knee positions*************************************************************************
 for I%:=4 to nvar%-1 do													    
        knx:=CalcKneeX(x[22][I%], x[23][I%], x[28][I%], x[29][I%]);
        kny:=CalcKneeY(x[22][I%], x[23][I%], x[28][I%], x[29][I%]);
           x[57][I%]:=knx;
           x[58][I%]:=kny;
next;   
'***************************************************************************************************************************     
    
'**********************Joint angles***********************************************************************************
for I%:=4 to nvar%-1 do													
        
        '*******************HIP**************************************************************
        angleA := CalcAngle(x[19][I%]-x[22][I%], x[20][I%]-x[23][I%]);
        angleB := CalcAngle(x[57][I%]-x[22][I%], x[58][I%]-x[23][I%]);
        angle := Abs(angleA - angleB);
        if angle > 180 then angle := 360-angle endif;        
        x[61][I%]:=angle;  
        '*************************************************************************************
        '*******************KNEE**************************************************************
        angleA := CalcAngle(x[22][I%]-x[57][I%], x[23][I%]-x[58][I%]);
        angleB := CalcAngle(x[28][I%]-x[57][I%], x[29][I%]-x[58][I%]);
        angle := Abs(angleA - angleB);
        if angle > 180 then angle := 360-angle endif;
        x[62][I%]:=angle;  
        '*************************************************************************************  
        '*******************ANKLE**************************************************************
        angleA := CalcAngle(x[57][I%]-x[28][I%], x[58][I%]-x[29][I%]);
        angleB := CalcAngle(x[31][I%]-x[28][I%], x[32][I%]-x[29][I%]);
        angle := Abs(angleA - angleB);
        if angle > 180 then angle := 360-angle endif;
        x[63][I%]:=angle;  
        '*************************************************************************************
        '*******************MTP**************************************************************
        angleA := CalcAngle(x[28][I%]-x[31][I%], x[29][I%]-x[32][I%]);
        angleB := CalcAngle(x[34][I%]-x[31][I%], x[35][I%]-x[32][I%]);
        angle := Abs(angleA - angleB);
        if angle > 180 then angle := 360-angle endif;
        x[64][I%]:=angle;  
       '*************************************************************************************        
      
next;   
'**************************************************************************************************************************        
        
    
synchdif:=syncht[tr%]-synch[tr%];
    
'*********************************imports data into buffers*******************************************    
for I%:=4 to nvar%-1 do
rtime[I%]:=rtime[I%]+synchdif;
	
		memsetitem(a%[1],0,rtime[I%], x[19][I%]);
		memsetitem(a%[2],0,rtime[I%], x[20][I%]);
		chantitle$(a%[1],"Crx (cm)");
		chantitle$(a%[2],"Cry (cm)");
		
	 
		memsetitem(a%[3],0,rtime[I%] , x[22][I%]);
		memsetitem(a%[4],0,rtime[I%] , x[23][I%]);
		chantitle$(a%[3],"Hipx (cm)");
		chantitle$(a%[4],"Hipy (cm)");
	
		memsetitem(a%[5],0,rtime[I%] , x[57][I%]);
		memsetitem(a%[6],0,rtime[I%] , x[58][I%]);
		chantitle$(a%[5],"knx (cm)");
		chantitle$(a%[6],"kny (cm)");
	
		memsetitem(a%[7],0,rtime[I%] , x[28][I%]);
		memsetitem(a%[8],0,rtime[I%] , x[29][I%]);
		chantitle$(a%[7],"ankx (cm)");
		chantitle$(a%[8],"anky (cm)");
	
		memsetitem(a%[9],0,rtime[I%] , x[31][I%]);
		memsetitem(a%[10],0,rtime[I%] , x[32][I%]);
		chantitle$(a%[9],"MTPx (cm)");
		chantitle$(a%[10],"MTPy (cm)");
	
		memsetitem(a%[11],0,rtime[I%] , x[34][I%]);
		memsetitem(a%[12],0,rtime[I%] , x[35][I%]);
		chantitle$(a%[11],"toex (cm)");
		chantitle$(a%[12],"toey (cm)");
        
        memsetitem(a%[13],0,rtime[I%] , x[37][I%]);
		memsetitem(a%[14],0,rtime[I%] , x[38][I%]);
		chantitle$(a%[13],"FLtx (cm)");
		chantitle$(a%[14],"FLty (cm)");
                                                                 
		memsetitem(a%[15],0,rtime[I%] , x[61][I%]);
		chantitle$(a%[15],"hip ang");

		memsetitem(a%[16],0,rtime[I%] , x[62][I%]);
		chantitle$(a%[16],"knee ang");

		memsetitem(a%[17],0,rtime[I%] , x[63][I%]);
		chantitle$(a%[17],"ankle ang)");

		memsetitem(a%[18],0,rtime[I%] , x[64][I%]);
		chantitle$(a%[18],"MTP ang");
        
        memsetitem(a%[19],0,rtime[I%], x[40][I%]);
		memsetitem(a%[20],0,rtime[I%], x[41][I%]);
		chantitle$(a%[19],"HLx (cm)");
		chantitle$(a%[20],"HLy (cm)");
	 
		memsetitem(a%[21],0,rtime[I%] , x[43][I%]);
		memsetitem(a%[22],0,rtime[I%] , x[44][I%]);
		chantitle$(a%[21],"HRx (cm)");
		chantitle$(a%[22],"HRy (cm)");
	
		memsetitem(a%[23],0,rtime[I%] , x[46][I%]);
		memsetitem(a%[24],0,rtime[I%] , x[47][I%]);
		chantitle$(a%[23],"FLx (cm)");
		chantitle$(a%[24],"FLy (cm)");
	
		memsetitem(a%[25],0,rtime[I%] , x[49][I%]);
		memsetitem(a%[26],0,rtime[I%] , x[50][I%]);
		chantitle$(a%[25],"FRx (cm)");
		chantitle$(a%[26],"FRy (cm)");
	
		memsetitem(a%[27],0,rtime[I%] , x[52][I%]);
		memsetitem(a%[28],0,rtime[I%] , x[53][I%]);
		chantitle$(a%[27],"CoMx (cm)");
		chantitle$(a%[28],"CoMy (cm)");
        
        memsetitem(a%[29],0,rtime[I%] , x[55][I%]);
		memsetitem(a%[30],0,rtime[I%] , x[56][I%]);
		chantitle$(a%[29],"mirx (cm)");
		chantitle$(a%[30],"miry (cm)");
        
next;
'*******************************************************************************
    ArrConst(x[][], 0);
   
next;

'*************saves the buffers into real channels****************************************************
Memsave(a%[1],14);
Memsave(a%[2],15);
Memsave(a%[3],16);
Memsave(a%[4],17);
Memsave(a%[5],18);
Memsave(a%[6],19);
Memsave(a%[7],20);
Memsave(a%[8],21);
Memsave(a%[9],22);
Memsave(a%[10],23);
Memsave(a%[11],24);
Memsave(a%[12],25);
Memsave(a%[13],26);
Memsave(a%[14],27);
Memsave(a%[15],28);
Memsave(a%[16],29);
Memsave(a%[17],30);
Memsave(a%[18],32);
Memsave(a%[19],33);
Memsave(a%[20],34);
Memsave(a%[21],35);
Memsave(a%[22],36);
Memsave(a%[23],37);
Memsave(a%[24],38);
Memsave(a%[25],39);
Memsave(a%[26],40);
Memsave(a%[27],41);
Memsave(a%[28],42);
Memsave(a%[29],43);
Memsave(a%[30],44);
'**************************************************************************************************

'********Calculates angles of a line with the x-axis in an anticlockwise direction*****************
func CalcAngle(x,y)
if x = 0 and y = 0 then
    angle := 999;
endif;

var angle := 90.0;          ' default angle if on y-axis
if x <> 0 then              ' avoid division by zero
    angle := 360.0*ATan(y/x)/(2.0*_pi);
endif;
                            ' now correct for quadrant
if y <= 0.0 and x <= 0.0 then           'if value is in the 3rd quartile
    angle += 180.0
else if y < 0.0 and x >= 0.0 then       'if value is in the 4th quartile
        angle += 360.0;
     else if y > 0.0 and x < 0.0 then   'if value is in the 2nd quartile
            angle += 180.0;
          endif;
     endif
endif;
return angle;
end;
'*************************************************************************************************

'********Calculates the virtual knee x position*****************
func CalcKneeX(hx, hy, ax, ay)
var aa, b, c, dd, r0, r1, temp, swapped%, E, K, x1, y1, x2, y2, hipx, hipy, anklex, ankley, knx, kny, tag;

        hipx:=hx;
        hipy:=hy;
        anklex:=ax;
        ankley:=ay;
   
        swapped%:=0;    
        aa:= hipx;
        b:= hipy;
        c:= anklex;
        dd:= ankley;
        r0:= femur;
        r1:= tibia;
        
        if (c = aa) then ' Protect from division by zero
            temp := aa;
            aa := b;
            b := temp;
            temp := c;
            c := dd;
            dd := temp;
            swapped% := 1;
        endif;
                
        
        E := (dd-b)/(c-aa);           ' Just working variables
        K := (r0*r0-r1*r1-aa*aa+c*c-b*b+dd*dd)/(2*(c-aa));

        if ((E*E+1)*((aa-K)*(aa-K)+b*b-r0*r0)) > (E*(aa-K)-b)*(E*(aa-K)-b) then    
            tag:=1;
        else
            tag:=(E*(aa-K)-b)*(E*(aa-K)-b) - (E*E+1)*((aa-K)*(aa-K)+b*b-r0*r0);
        endif;         
        
        y1 := (-(E*(aa-K)-b)+sqrt(tag))/((E*E+1));;
        x1 := K-E*y1;
        y2 := (-(E*(aa-K)-b)-sqrt(tag))/((E*E+1));
        x2 := K-E*y2;

        if swapped% then
            temp := x1;
            x1 := y1;
            y1 := temp;
            temp := x2;
            x2 := y2;
            y2 := temp;
        endif;
        
        if hipx<x2 or anklex<X2 then 
            knx:=x2;
            kny:=y2;
        else knx:=x1;
            kny:=y1
        endif;    
           
return knx;
end;
'*************************************************************************************************
'********Calculates the virtual knee y position*****************
func CalcKneeY(hx, hy, ax, ay)
var aa, b, c, dd, r0, r1, temp, swapped%, E, K, x1, y1, x2, y2, hipx, hipy, anklex, ankley, knx, kny, tag;

        hipx:=hx;
        hipy:=hy;
        anklex:=ax;
        ankley:=ay;
   
        swapped%:=0;    
        aa:= hipx;
        b:= hipy;
        c:= anklex;
        dd:= ankley;
        r0:= femur;
        r1:= tibia;
        
        if (c = aa) then ' Protect from division by zero
            temp := aa;
            aa := b;
            b := temp;
            temp := c;
            c := dd;
            dd := temp;
            swapped% := 1;
        endif;
                
        
        E := (dd-b)/(c-aa);           ' Just working variables
        K := (r0*r0-r1*r1-aa*aa+c*c-b*b+dd*dd)/(2*(c-aa));

        if ((E*E+1)*((aa-K)*(aa-K)+b*b-r0*r0)) > (E*(aa-K)-b)*(E*(aa-K)-b) then    
            tag:=1;
        else
            tag:=(E*(aa-K)-b)*(E*(aa-K)-b) - (E*E+1)*((aa-K)*(aa-K)+b*b-r0*r0);
        endif;         
        
        y1 := (-(E*(aa-K)-b)+sqrt(tag))/((E*E+1));;
        x1 := K-E*y1;
        y2 := (-(E*(aa-K)-b)-sqrt(tag))/((E*E+1));
        x2 := K-E*y2;

        if swapped% then
            temp := x1;
            x1 := y1;
            y1 := temp;
            temp := x2;
            x2 := y2;
            y2 := temp;
        endif;
        
        if hipx<x2 or anklex<X2 then 
            knx:=x2;
            kny:=y2;
        else knx:=x1;
            kny:=y1
        endif;    
           
return kny;
end;
'*************************************************************************************************